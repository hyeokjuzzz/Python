############################################################
# # 정수형 타입 
# # . 파이썬의 정수는 크기에 구애없이 모든 숫자를 담을 수 있다. 
# #   정수의 크기에 따라서 가변적으로 데이터 형식이 변형 된다.
#############################################################
# # 정수 타입의 변수 a 에 2의 100 승 결과를 할당 후 출력
# a = 2 ** 1000
# print(a)
# print(2**1000)

# # 음수 도 표현된다. 
# a = 2 ** 1000 *  -1
# print(a)
# print(2**1000)












##########################################################################
# # 진법의 표현 
##########################################################################
# print(0b11) # 2진수 11 을 10진수로 표현
# print(0o10) # 8진수 10 을 10진수로 표현
# print(0xb)  # 16진수 b 를 10진수로 표현

# # # 다른 진법으로 숫자 표현
# print(bin(3))  # 10 진수 3 을 2진법으로 
# print(oct(8))  # 10 진수 8 을 8진법으로 
# print(hex(11)) # 10 진수 11 을 16진수로 









########################################################################
# # 실수형 
# # - 소수점 이하의 숫자 데이터 유형
########################################################################
# light  = 10  # 정수형
# light  = 10.1223 # 실수형

# # # 실수 형의 다른 표현 (부동 소수점)
# light  = 9.46e12 # e12 : 10 의 12 승
# print(light)
# light  = 9.46 * 10**12
# print(light)













#################################################################
# # 문자열 
# # - 일련의 문자를 따옴표 로 감싸 나열해 둔 형식
# # 쌍 따옴표, 홑 따옴표 
##################################################################
# # 확장열
# # 문자열을 나타내는 따옴표 내의 프로그래밍 동작 기능. 
# # ' \ ' 역 슬러쉬 로 표현한다.
# print("안녕하세요 \" 파이썬 \"  문법 중 \n 확장열에 관한 예시입니다. ") 


# # \ \ 를 많이 사용하는 문자열 ( 파일의 경로 )
# # r"문자열\" 를 사용하면 \ 를 여러번 사용하지 않고 표현.
# print("C:\\Python\\source") # 경로를 나타내는 문자열은 r 을 통하여 \ 를 한번만 쓸수 있다.
# print(r"C:\Python\source")


# # 장문의 문자열 표현
# # 삼겹따옴표 [ """ """ ] 또는 [ '''  ''' ] 를 통하여 장문의 문자열을 관리할 수있다.
# Message  = '''안녕하세요
# 안동대학교
# 스마트팩토리 파이썬 수업입니다.
# '''
# print(Message)

# # # 또다른 표현법 
# Message = "안녕하세요"
# message2 = "안동대학교"
# message3 = "파이썬입니다."
# print(Message)
# print(message2)
# print(message3)

# # # 또다른 표현법
# print(Message + "\n" + message2 + "\n" + message3)




# # 삼겹따옴표 [ """ """ ] 내의 \ 는 개행을 막아준다.
# Message  = '''안녕하세요 \
# 안동대학교  \
# 스마트팩토리 파이썬 수업입니다. \
# '''
# print(Message)









###########################################
# # 문자 코드 와 문자
# # ord() 와 chr()
# # 이기종 (기종이 다른 환경) 간의 통신에서 사용하는 진법 또는 코드 규칙을 
# # 통일하여 처리된 값과 결과 를 일치 시키시 위하여 변형 하는 문법이 발생.
###########################################
# a = ord('a') # 문자 'a' 의 코드 값을 a 변수에 할당
# b = chr(97)  # 10진 코드값 97 을 문자 로 반환하여 표현
# print(a)
# print(b)

# c = chr(0x61)
# print(c)

# d = chr(0b1100001) # 2진수 를 변환 97
# print(d)






######################################################
# # 진위 형 True/False
# #  . 참과 거짓을 1 과 0 으로 표현. 가독성이 좋은(코드를 보기 쉽다) 코드를 구현 하도
# #    True / False 로 표현하기 위해 발생.
# # True / False 텃문자는 대문자로 표현
######################################################
# # 진위 데이터 의 할당 
# a = True
# b = False


# # 진위 형의 활용 
# a = 5        # a 가 5 값을 할당 받는다.
# b = a == 5   # a 가 5 값을 가지고 있으므로 b 는 True 를 할당 받는다.
# print(b)











############################################################
# # None 
# # 아무런 값이 할당되지 않은 상태. 타언어에서는 null
# #  아파트 계약을 해서 세대주가 되었는데 실제 아파트는 건축되지 않은 상태. 
############################################################
# a = None
# print(a == None)
# print(a)

# a = '' # '' 은 값이 없는 데이터가 할당된 상태 . 메모리에 정상적으로 등록이 된상태
# print(a == None)
# print(a, "<-- 없어용")






















############################################################
# # 컬렉션 (다양한 컬렉션은 추후에 확인)
# #  - 데이터의 집합 (데이터가 등록된 메모리 주소를 관리하는 객체)
# # 
# # - 리스트 
# #   . 동일한 데이터 유형의 값을 하나의 집합으로 묶어 특정 변수에 할당하는 형태
# #   . 데이터를 변경 할 수 있다.
#############################################################
# # 리스트 의 생성 과 사용

#           0       1      2      3
# values = ["값1," , "값2", "값3", "값4"]
# print(values[1])
# values[0] = "가앖1"
# print(values[0])

# # # 튜플 의 생성과 값의 변경 
# vaues = ("값1," , "값2", "값3", "값4")
# print(values[0])
# vaues[0] = "가앖1ㅋㅋㅋ"









####################################################################
# # 실습 
# # 문자 리스트 '1', '2', '3', '4', '5' 를 만들고
# # 첫번째 값[0]과 3번째[2] 값의 합을 나타내 보세요 결과 : 4
#####################################################################
# sValues = ["1","2","3","4","5"]
# first = int(sValues[0])
# therd = int(sValues[2])
# print(first + therd)
